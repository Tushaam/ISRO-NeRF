# -*- coding: utf-8 -*-
"""ISRO_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AoZL7WZXUfIh7j7N1vnnB9ypSpTTJcsa
"""

import os
import numpy as np
from google.colab import drive
drive.mount('/content/drive')

print(os.getcwd())

data_path = '/content/drive/My Drive/ISRO'
print(os.listdir(data_path))
train_dir = os.path.join(data_path, 'train')
val_dir = os.path.join(data_path, 'val')
test_dir = os.path.join(data_path, 'test')

print(train_dir)
print(os.listdir())

"""Now we will try to convert all images to jpeg format"""

from PIL import Image
import os

def convert_format(input_dir):
    for filename in os.listdir(input_dir):
        if filename.endswith(".png"):
            img_path = os.path.join(input_dir, filename)
            prefix = filename.split(".png")[0]
            img = Image.open(img_path)
            img.save(os.path.join(input_dir, prefix + '.jpeg'))
            img.close()
            os.remove(img_path)
        else:
            continue

print("Successfully converted to JPEG!!")

convert_format(train_dir)
convert_format(val_dir)
convert_format(test_dir)

def resize_images(input_dir, size):
    for filename in os.listdir(input_dir):
        img_path=os.path.join(input_dir,filename)
        img=Image.open(img_path)
        resized_img = img.resize(size, Image.LANCZOS)
        resized_img.save(img_path)
        img.close()

size=(256,256)
resize_images(train_dir,size)
resize_images(val_dir,size)
resize_images(test_dir,size)

def count_imgs(input_dir):
    count=0
    for image in os.listdir(input_dir):
        if image.endswith(".jpeg"):
            count+=1
    print(f"Total images in {input_dir} are:{count}")

count_imgs(train_dir)
count_imgs(val_dir)
count_imgs(test_dir)

"""We had done the above check to verify if the images are correctly accessible by python"""

import cv2
import glob
import random
import numpy as np
import matplotlib.pyplot as plt

image_files = glob.glob('/content/drive/My Drive/ISRO/train/*.jpeg')

random.shuffle(image_files)


images = [cv2.imread(file) for file in image_files[:5]]

stacked_image = np.hstack(images)

plt.figure(figsize=(12, 6))
plt.imshow(cv2.cvtColor(stacked_image, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()

"""We will start with the NeRF model implementation now"""

import tensorflow as tf
import numpy as np
import warnings
warnings.filterwarnings('ignore')
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Flatten

#NeRF Architecture:

def nerf():
    model=Sequential([
        Dense(256, activation='relu',input_shape=(256,256,3)),
        Dense(128, activation='relu'),
        Dense(64,  activation='relu'),
        Dense(32,  activation='relu'),
        Dense(3)
    ])
    return model

model=nerf()
model.summary()

!pip install visualkeras
import visualkeras
from PIL import ImageFont

visualkeras.layered_view(model,scale_xy=2,legend=True)

from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array

def load_images_from_dir(directory):
    images = []
    for filename in os.listdir(directory):
        if filename.endswith(".jpeg"):
            img = load_img(os.path.join(directory, filename))
            img_array = img_to_array(img)
            images.append(img_array)
    return np.array(images)

x_train = load_images_from_dir(train_dir)
x_val = load_images_from_dir(val_dir)

x_train = x_train / 255.0
x_val = x_val / 255.0

y_train = np.arange(len(x_train))
y_val = np.arange(len(x_val))

print(f"Number of training images: {len(x_train)}")
print(f"Number of validation images: {len(x_val)}")

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])

history=model.fit(x_train,x_train,epochs=5,batch_size=16,validation_data=(x_val,x_val))

loss=[0.1284,0.0562,0.0147,0.0088,0.0088]
mae=[0.3093,0.1976,0.0917,0.0820,0.0871]

print("Average loss after training for 5 epochs:",np.mean(loss).round(4))
print("Average MAE after training for 5 epochs:",np.mean(mae).round(4))

import numpy as np
x_test = load_images_from_dir(test_dir)
x_test = x_test / 255.0
y_test = np.arange(len(x_test))

model.evaluate(x_test, x_test)

predictions=model.predict(x_test)

mse = np.mean((predictions - x_test) ** 2)
mae = np.mean(np.abs(predictions - x_test))

num_examples = 5
random_indices = np.random.choice(len(x_test), size=num_examples, replace=False)

for idx in random_indices:
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(x_test[idx])
    plt.title('Ground Truth')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(predictions[idx])
    plt.title('Generated by NeRF')
    plt.axis('off')

    plt.show()

print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Mean Absolute Error (MAE): {mae:.4f}")

